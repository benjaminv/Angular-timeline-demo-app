{"ast":null,"code":"/**\n * filter xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */\nvar FilterCSS = require(\"cssfilter\").FilterCSS;\n\nvar DEFAULT = require(\"./default\");\n\nvar parser = require(\"./parser\");\n\nvar parseTag = parser.parseTag;\nvar parseAttr = parser.parseAttr;\n\nvar _ = require(\"./util\");\n/**\n * returns `true` if the input value is `undefined` or `null`\n *\n * @param {Object} obj\n * @return {Boolean}\n */\n\n\nfunction isNull(obj) {\n  return obj === undefined || obj === null;\n}\n/**\n * get attributes for a tag\n *\n * @param {String} html\n * @return {Object}\n *   - {String} html\n *   - {Boolean} closing\n */\n\n\nfunction getAttrs(html) {\n  var i = _.spaceIndex(html);\n\n  if (i === -1) {\n    return {\n      html: \"\",\n      closing: html[html.length - 2] === \"/\"\n    };\n  }\n\n  html = _.trim(html.slice(i + 1, -1));\n  var isClosing = html[html.length - 1] === \"/\";\n  if (isClosing) html = _.trim(html.slice(0, -1));\n  return {\n    html: html,\n    closing: isClosing\n  };\n}\n/**\n * shallow copy\n *\n * @param {Object} obj\n * @return {Object}\n */\n\n\nfunction shallowCopyObject(obj) {\n  var ret = {};\n\n  for (var i in obj) {\n    ret[i] = obj[i];\n  }\n\n  return ret;\n}\n/**\n * FilterXSS class\n *\n * @param {Object} options\n *        whiteList, onTag, onTagAttr, onIgnoreTag,\n *        onIgnoreTagAttr, safeAttrValue, escapeHtml\n *        stripIgnoreTagBody, allowCommentTag, stripBlankChar\n *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`\n */\n\n\nfunction FilterXSS(options) {\n  options = shallowCopyObject(options || {});\n\n  if (options.stripIgnoreTag) {\n    if (options.onIgnoreTag) {\n      console.error('Notes: cannot use these two options \"stripIgnoreTag\" and \"onIgnoreTag\" at the same time');\n    }\n\n    options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;\n  }\n\n  options.whiteList = options.whiteList || DEFAULT.whiteList;\n  options.onTag = options.onTag || DEFAULT.onTag;\n  options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;\n  options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;\n  options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;\n  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;\n  options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;\n  this.options = options;\n\n  if (options.css === false) {\n    this.cssFilter = false;\n  } else {\n    options.css = options.css || {};\n    this.cssFilter = new FilterCSS(options.css);\n  }\n}\n/**\n * start process and returns result\n *\n * @param {String} html\n * @return {String}\n */\n\n\nFilterXSS.prototype.process = function (html) {\n  // compatible with the input\n  html = html || \"\";\n  html = html.toString();\n  if (!html) return \"\";\n  var me = this;\n  var options = me.options;\n  var whiteList = options.whiteList;\n  var onTag = options.onTag;\n  var onIgnoreTag = options.onIgnoreTag;\n  var onTagAttr = options.onTagAttr;\n  var onIgnoreTagAttr = options.onIgnoreTagAttr;\n  var safeAttrValue = options.safeAttrValue;\n  var escapeHtml = options.escapeHtml;\n  var cssFilter = me.cssFilter; // remove invisible characters\n\n  if (options.stripBlankChar) {\n    html = DEFAULT.stripBlankChar(html);\n  } // remove html comments\n\n\n  if (!options.allowCommentTag) {\n    html = DEFAULT.stripCommentTag(html);\n  } // if enable stripIgnoreTagBody\n\n\n  var stripIgnoreTagBody = false;\n\n  if (options.stripIgnoreTagBody) {\n    var stripIgnoreTagBody = DEFAULT.StripTagBody(options.stripIgnoreTagBody, onIgnoreTag);\n    onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;\n  }\n\n  var retHtml = parseTag(html, function (sourcePosition, position, tag, html, isClosing) {\n    var info = {\n      sourcePosition: sourcePosition,\n      position: position,\n      isClosing: isClosing,\n      isWhite: whiteList.hasOwnProperty(tag)\n    }; // call `onTag()`\n\n    var ret = onTag(tag, html, info);\n    if (!isNull(ret)) return ret;\n\n    if (info.isWhite) {\n      if (info.isClosing) {\n        return \"</\" + tag + \">\";\n      }\n\n      var attrs = getAttrs(html);\n      var whiteAttrList = whiteList[tag];\n      var attrsHtml = parseAttr(attrs.html, function (name, value) {\n        // call `onTagAttr()`\n        var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;\n        var ret = onTagAttr(tag, name, value, isWhiteAttr);\n        if (!isNull(ret)) return ret;\n\n        if (isWhiteAttr) {\n          // call `safeAttrValue()`\n          value = safeAttrValue(tag, name, value, cssFilter);\n\n          if (value) {\n            return name + '=\"' + value + '\"';\n          } else {\n            return name;\n          }\n        } else {\n          // call `onIgnoreTagAttr()`\n          var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);\n          if (!isNull(ret)) return ret;\n          return;\n        }\n      }); // build new tag html\n\n      var html = \"<\" + tag;\n      if (attrsHtml) html += \" \" + attrsHtml;\n      if (attrs.closing) html += \" /\";\n      html += \">\";\n      return html;\n    } else {\n      // call `onIgnoreTag()`\n      var ret = onIgnoreTag(tag, html, info);\n      if (!isNull(ret)) return ret;\n      return escapeHtml(html);\n    }\n  }, escapeHtml); // if enable stripIgnoreTagBody\n\n  if (stripIgnoreTagBody) {\n    retHtml = stripIgnoreTagBody.remove(retHtml);\n  }\n\n  return retHtml;\n};\n\nmodule.exports = FilterXSS;","map":null,"metadata":{},"sourceType":"script"}